/*
    We start with a good ol' reset.
    That's the one by Eric Meyer http://meyerweb.com/eric/tools/css/reset/

    You can probably argue if it is needed here, or not, but for sure it
    doesn't do any harm and gives us a fresh start.
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
    margin: 0;
    padding: 0;
    border: 0;
    font-size: 100%;
    font: inherit;
    vertical-align: baseline;
}

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
    display: block;
}
body {
    line-height: 1;
}

blockquote, q {
    quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
    content: '';
    content: none;
}

table {
    border-collapse: collapse;
    border-spacing: 0;
}

/*
    Now here is when interesting things start to appear.

    We set up <body> styles with default font and nice gradient in the background.
    And yes, there is a lot of repetition there because of -prefixes but we don't
    want to leave anybody behind.
*/
body {
    font-family: 'PT Sans', sans-serif;
    min-height: 740px;
}

/*
    Now let's bring some text styles back ...
*/
b, strong { font-weight: bold }
i, em { font-style: italic }

/*
    ... and give links a nice look.
*/
a {
    color: inherit;
    text-decoration: none;
    padding: 0 0.1em;
    background: rgba(255,255,255,0.5);
    text-shadow: -1px -1px 2px rgba(100,100,100,0.9);
    border-radius: 0.2em;

    -webkit-transition: 0.5s;
    -moz-transition:    0.5s;
    -ms-transition:     0.5s;
    -o-transition:      0.5s;
    transition:         0.5s;
}

a:hover,
a:focus {
    background: rgba(255,255,255,1);
    text-shadow: -1px -1px 2px rgba(100,100,100,0.5);
}

.fallback-message {
    opacity: 0;
    font-family: sans-serif;
    line-height: 1.3;

    width: 780px;
    padding: 10px 10px 0;
    margin: 20px auto;

    border: 1px solid #E4C652;
    border-radius: 10px;
    background: #EEDC94;
}

.fallback-message p {
    margin-bottom: 10px;
}

.impress-supported .fallback-message {
    display: none;
}


.step {
    position: relative;
    width: 900px;
    padding: 40px;
    margin: 20px auto;

    -webkit-box-sizing: border-box;
    -moz-box-sizing:    border-box;
    -ms-box-sizing:     border-box;
    -o-box-sizing:      border-box;
    box-sizing:         border-box;

    font-family: 'PT Serif', georgia, serif;
    font-size: 48px;
    line-height: 1.5;
}

/*
    ... and we enhance the styles for impress.js.

    Basically we remove the margin and make inactive steps a little bit transparent.
*/
.impress-enabled .step {
    margin: 0;
    opacity: 0.3;

    -webkit-transition: opacity 1s;
    -moz-transition:    opacity 1s;
    -ms-transition:     opacity 1s;
    -o-transition:      opacity 1s;
    transition:         opacity 1s;
}

.impress-enabled .step.active { opacity: 1; }

.impress-enabled .clearstep { opacity: 0; }

.impress-enabled .clearstep.active { opacity: 1; }

table .ctr {
    margin-left: auto;
    margin-right: auto;
}

.invisible {
    opacity: 0;
}

.spaced {
    width: 8%;
}

.rep {
    width: 10%;
    font-size: x-large;
}

.icon {
    text-align: center;
}

.level {
    margin-top: auto;
    margin-bottom: auto;
    height: 45px;
    border-radius: 24px;
}


/*
    These 'slide' step styles were heavily inspired by HTML5 Slides:
    http://html5slides.googlecode.com/svn/trunk/styles.css

    ;)

    They cover everything what you see on first three steps of the demo.

    All impress.js steps are wrapped inside a div element of 0 size! This means that relative
    values for width and height (example: `width: 100%`) will not work. You need to use pixel
    values. The pixel values used here correspond to the data-width and data-height given to the
    #impress root element. When the presentation is viewed on a larger or smaller screen, impress.js
    will automatically scale the steps to fit the screen.
*/
.slide {
    display: block;

    width: 900px;
    height: 700px;
    padding: 40px 60px;

    background-color: white;
    border: 1px solid rgba(0, 0, 0, .3);
    border-radius: 10px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, .1);

    color: rgb(102, 102, 102);
    text-shadow: 0 2px 2px rgba(0, 0, 0, .1);

    font-family: 'Open Sans', Arial, sans-serif;
    font-size: 30px;
    line-height: 36px;
    letter-spacing: -1px;
}

.slide q {
    display: block;
    font-size: 50px;
    line-height: 72px;

    margin-top: 100px;
}

.slide q strong {
    white-space: nowrap;
}

ol, ul {
    list-style: inside;
}

/* Title page */

#title {
    padding: 0;
}

#t5header {
    color: #1f6387;
}

#t5header img {
    width: 200px;
}

#t5header .author {
    justify: right;
    float: right;
    margin-top: 80px;
    margin-right: 10px;
}

#t5header hr {
    height: 8px;
    background-color: #1f6387;
    border-color: #1f6387;
}

#t5footer {
    position: absolute;
    top: 560px;
    width: 898px;
    color: #1f6387;
}

#t5footer hr {
    size: 1px;
    background-color: #1f6387;
    border-color: #1f6387;
}

#title .title {
    font-size: 50px;
    line-height: 72px;
    font-weight: bold;
    text-align: center;
}

#title .subtitle {
    font-size: 45px;
    line-height: 72px;
    text-align: center;
}

.bare {
    padding: 0;
}

.t5footer {
    padding: 0;
    position: absolute;
    top: 620px;
    width: 898px;
    color: #1f6387;
}

.t5footer hr {
    size: 1px;
    background-color: #1f6387;
    border-color: #1f6387;
}

.t5footer img {
    height: 50px;
}

.slide .topic {
    display: block;
    font-size: 50px;
    line-height: 72px;
    margin-top: 50px;
    margin-bottom: 20px;
}

.slide .topic strong {
    white-space: nowrap;
}

.issue {
    position: absolute;
    top: -20px;
}

.dark-mode {
    background-color: black;
    color: white;
}

.dark-mode .legend text.label {
   fill: #fff;
}

.dark-mode .legend text.legendTitle {
   fill: #fff;
}

#title2 .try {
    font-size: 64px;
    position: absolute;
    top: -0.5em;
    left: 1.5em;

    -webkit-transform: translateZ(20px);
    -moz-transform:    translateZ(20px);
    -ms-transform:     translateZ(20px);
    -o-transform:      translateZ(20px);
    transform:         translateZ(20px);
}

#title2 h1 {
    font-size: 180px;

    -webkit-transform: translateZ(50px);
    -moz-transform:    translateZ(50px);
    -ms-transform:     translateZ(50px);
    -o-transform:      translateZ(50px);
    transform:         translateZ(50px);
}

#title2 .footnote {
    font-size: 32px;
}

.notes-shown {
    display: inline;
    font-size: medium;
    height: 2.5em;
    line-height: 1.2em;
    overflow: hidden;
    position: absolute;
    right: -10px; bottom: 65px;
    width: 100%;
}

.notes-shown > span {
    position: absolute;
    top: 0;
    animation: smoothVScroll 20s 1.5s infinite;
    animation-name: smoothVScroll;
    animation-timing-function: linear;
    animation-delay: 1.5s;
}

@keyframes smoothVScroll {
    from {
        transform: translateY(0);
    }
    to {
        transform: translateY(-100%);
    }
}

.scroller {
    height: 1.2em;
    line-height: 1.2em;
    position: relative;
    overflow: hidden;
    width: 35em;
}

.scroller.two {
    --scrollCount: 2;
}

.scroller.three {
    --scrollCount: 3;
}

.scroller.four {
    --scrollCount: 4;
}

.scroller > span {
    position: absolute;
    top: 0;
    font-weight: bold;
}

@function capitalize($string) {
  @return to-upper-case(str-slice($string, 1, 1)) + str-slice($string, 2);
}

@function toCardinal($number) {
    @if $number == 1 { @return one; }
    @if $number == 2 { @return two; }
    @if $number == 3 { @return three; }
    @if $number == 4 { @return four; }
    @if $number == 5 { @return five; }
    @if $number == 6 { @return six; }
    @if $number == 7 { @return seven; }
    @if $number == 8 { @return eight; }
    @if $number == 9 { @return nine; }
    @if $number == 10 { @return ten; }
    @else { @return unknown; }
}

$maxScrollCount: 10;
@for $i from 2 through $maxScrollCount {
    $cardinal: toCardinal($i);
    $name: stepScroll#{capitalize($cardinal)};
    .scroller.#{$cardinal} > span { animation: #{$name} 6s 1.5s infinite; }
    @keyframes #{$name} {
        @for $j from 0 through $i - 1 {
            $percent: 0% + floor((100 / $i) * $j);
            #{$percent} { top: $j * -1.2em }
        }
    }
}

.simTitle {
    //color: white;
    color: black;
}


.hint {
    /*
        We hide the hint until presentation is started and from browsers not supporting
        impress.js, as they will have a linear scrollable view ...
    */
    display: none;

    /*
        ... and give it some fixed position and nice styles.
    */
    position: fixed;
    left: 0;
    right: 0;
    bottom: 200px;

    background: rgba(0,0,0,0.5);
    color: #EEE;
    text-align: center;

    font-size: 50px;
    padding: 20px;

    z-index: 100;

    /*
        By default we don't want the hint to be visible, so we make it transparent ...
    */
    opacity: 0;

    /*
        ... and position it below the bottom of the screen (relative to it's fixed position)
    */
    -webkit-transform: translateY(400px);
    -moz-transform:    translateY(400px);
    -ms-transform:     translateY(400px);
    -o-transform:      translateY(400px);
    transform:         translateY(400px);

    /*
        Now let's imagine that the hint is visible and we want to fade it out and move out
        of the screen.

        So we define the transition on the opacity property with 1s duration and another
        transition on transform property delayed by 1s so it will happen after the fade out
        on opacity finished.

        This way user will not see the hint moving down.
    */
    -webkit-transition: opacity 1s, -webkit-transform 0.5s 1s;
    -moz-transition:    opacity 1s,    -moz-transform 0.5s 1s;
    -ms-transition:     opacity 1s,     -ms-transform 0.5s 1s;
    -o-transition:      opacity 1s,      -o-transform 0.5s 1s;
    transition:         opacity 1s,         transform 0.5s 1s;
}

/*
    Now we 'enable' the hint when presentation is initialized ...
*/
.impress-enabled .hint { display: block }

/*
    ... and we will show it when the first step (with id 'bored') is active.
*/
.impress-on-bored .hint {
    /*
        We remove the transparency and position the hint in its default fixed
        position.
    */
    opacity: 1;

    -webkit-transform: translateY(0px);
    -moz-transform:    translateY(0px);
    -ms-transform:     translateY(0px);
    -o-transform:      translateY(0px);
    transform:         translateY(0px);

    /*
        Now for fade in transition we have the oposite situation from the one
        above.

        First after 4.5s delay we animate the transform property to move the hint
        into its correct position and after that we fade it in with opacity
        transition.
    */
    -webkit-transition: opacity 1s 5s, -webkit-transform 0.5s 4.5s;
    -moz-transition:    opacity 1s 5s,    -moz-transform 0.5s 4.5s;
    -ms-transition:     opacity 1s 5s,     -ms-transform 0.5s 4.5s;
    -o-transition:      opacity 1s 5s,      -o-transform 0.5s 4.5s;
    transition:         opacity 1s 5s,         transform 0.5s 4.5s;
}
